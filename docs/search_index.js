var documenterSearchIndex = {"docs":
[{"location":"#This-is-MyProject-Documentation","page":"This is MyProject Documentation","title":"This is MyProject Documentation","text":"","category":"section"},{"location":"","page":"This is MyProject Documentation","title":"This is MyProject Documentation","text":"Welcome to the documentation page. ","category":"page"},{"location":"","page":"This is MyProject Documentation","title":"This is MyProject Documentation","text":"note: Julia interface with ALGENCAN\nDocumentation about Julia interface with ALGENCAN and Julia interface with CUTEst to test CUTEst problems over ALGENCAN.","category":"page"},{"location":"","page":"This is MyProject Documentation","title":"This is MyProject Documentation","text":"JuliaInterface4CUTEst\nJuliaInterface4CUTEst.evalf!(n::Int32,x::Ptr{Float64},f::Ptr{Float64},inform::Int32,pdataptr::Ptr{JuliaInterface4CUTEst.MyDataPtr}=nothing)\nJuliaInterface4CUTEst.evalc!(\n    n::Int32,x::Ptr{Float64},m::Int32,p::Int32,c::Ptr{Float64},inform::Int32,pdataptr::Ptr{JuliaInterface4CUTEst.MyDataPtr}=nothing\n)\nJuliaInterface4CUTEst.evalg!(n::Int32,x::Ptr{Float64},g::Ptr{Float64},inform::Int32,pdataptr::Ptr{JuliaInterface4CUTEst.MyDataPtr}=nothing)\nJuliaInterface4CUTEst.evalj!(n::Int32,x::Ptr{Float64},m::Int32,p::Int32,ind::Ptr{Int32},\n    sorted::Ptr{Int32},jsta::Ptr{Int32},jlen::Ptr{Int32},lim::Int32,\n    jvar::Ptr{Int32},jval::Ptr{Float64},inform::Int32,pdataptr::Ptr{JuliaInterface4CUTEst.MyDataPtr}=nothing\n    )\nJuliaInterface4CUTEst.evalhl!(\n    n::Int32,x::Ptr{Float64},m::Int32,p::Int32,lambda::Ptr{Float64},lim::Int32,\n    inclf::Int32,hlnnz::Ptr{Int32},hlrow::Ptr{Int32},hlcol::Ptr{Int32},hlval::Ptr{Float64},\n    inform::Ptr{Int32},pdataptr::Ptr{JuliaInterface4CUTEst.MyDataPtr}=nothing\n)\nJuliaInterface4CUTEst.problem_params()\ncsc2csr(nlp_obj::CUTEstModel,x_wrap::Vector{Float64},val2::Vector{Float64},col::Vector{Int32},ind2::Vector{Int32},line_len::Vector{Int32})\n\nJuliaInterface4CUTEstTest\nrun_tests()\n\nProblemDefinition\nProblemDefinition.evalf!(n::Int32,x::Ptr{Float64},f::Ptr{Float64},inform::Int32,pdataptr::Ptr{ProblemDefinition.MyDataPtr}=nothing)\nProblemDefinition.evalc!(\n    n::Int32,x::Ptr{Float64},m::Int32,p::Int32,c::Ptr{Float64},inform::Int32,pdataptr::Ptr{ProblemDefinition.MyDataPtr}=nothing\n)\nProblemDefinition.evalg!(n::Int32,x::Ptr{Float64},g::Ptr{Float64},inform::Int32,pdataptr::Ptr{ProblemDefinition.MyDataPtr}=nothing)\nProblemDefinition.evalj!(n::Int32,x::Ptr{Float64},m::Int32,p::Int32,ind::Ptr{Int32},\n    sorted::Ptr{Int32},jsta::Ptr{Int32},jlen::Ptr{Int32},lim::Int32,\n    jvar::Ptr{Int32},jval::Ptr{Float64},inform::Int32,pdataptr::Ptr{ProblemDefinition.MyDataPtr}=nothing\n    )\nProblemDefinition.evalhl!(\n    n::Int32,x::Ptr{Float64},m::Int32,p::Int32,lambda::Ptr{Float64},lim::Int32,\n    inclf::Int32,hlnnz::Ptr{Int32},hlrow::Ptr{Int32},hlcol::Ptr{Int32},hlval::Ptr{Float64},\n    inform::Ptr{Int32},pdataptr::Ptr{ProblemDefinition.MyDataPtr}=nothing\n)\nProblemDefinition.problem_params()","category":"page"},{"location":"#JuliaInterface4CUTEst","page":"This is MyProject Documentation","title":"JuliaInterface4CUTEst","text":"A module intended to define parameters and functions for CUTEst models in a way that can be used with any model. It exports parameters and evaluation functions to be used in ALGENCAN. It uses NLPModels package to compute derivatives and another needed computations.\n\n\n\n\n\n","category":"module"},{"location":"#Main.JuliaInterface4CUTEst.evalf!","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEst.evalf!","text":"evalf!(n::Int32,x::Ptr{Float64},f::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing)::Nothing\n\nComputes objective function with parameters provided from ALGENCAN and stores it in the same    address of f::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   f::Ptr{Float64}: stores value of objective function.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.JuliaInterface4CUTEst.evalc!","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEst.evalc!","text":"evalc!(     n::Int32,x::Ptr{Float64},m::Int32,p::Int32,c::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing   )::Nothing\n\nComputes vector of restrictions of size m+p with parameters provided from ALGENCAN. Stores result in the same    address of c::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   m::Int32: number of equality constraints.   p::Int32: number of inequality constraints.   c::Ptr{Float64}: stores computed constraints, equality constraints comes first.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.JuliaInterface4CUTEst.evalg!","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEst.evalg!","text":"evalg!(n::Int32,x::Ptr{Float64},g::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing)::Nothing\n\nComputes gradient of objective function with parameters provided from ALGENCAN and stores it in the same    address of g::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   g::Ptr{Float64}: stores gradient of objective function.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.JuliaInterface4CUTEst.evalj!","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEst.evalj!","text":"evalj!(n::Int32,x::Ptr{Float64},m::Int32,p::Int32,ind::Ptr{Int32},     sorted::Ptr{Int32},jsta::Ptr{Int32},jlen::Ptr{Int32},lim::Int32,     jvar::Ptr{Int32},jval::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing   )::Nothing\n\nComputes vectors that describes jacobian of restrictions in Compressed Sparse Row format. Computed vectors are   stored in the same addresses of jsta::Ptr{Int32},jlen::Ptr{Int32},jvar::Ptr{Int32} and jval::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   m::Int32: number of equality constraints.   p::Int32: number of inequality constraints.   ind::Ptr{Int32}: boolean that indicates which constraints should be included in jacobian of constraints.   sorted::Ptr{Int32}: indicates if gradients are in ascending order.   jsta::Ptr{Int32}: stores indexes from jval of elements that are first elements of its respective line in original matrix.   jlen::Ptr{Int32}: stores quantity of non zero elements in each line.   lim::Int32: limit of elements in jvar and jval.   jvar::Ptr{Int32}: stores columns indexes of elements from jval.   jval::Ptr{Float64}: stores non zero elements.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.JuliaInterface4CUTEst.evalhl!","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEst.evalhl!","text":"evalhl!(     n::Int32,x::Ptr{Float64},m::Int32,p::Int32,lambda::Ptr{Float64},lim::Int32,     inclf::Int32,hlnnz::Ptr{Int32},hlrow::Ptr{Int32},hlcol::Ptr{Int32},hlval::Ptr{Float64},     inform::Ptr{Int32},pdataptr::Ptr{MyDataPtr}=nothing   )::Nothing\n\nComputes vectors that describes hessian of Lagrangian function in Coordinate format. Computed vectors are   stored in the same addresses of hlrow::Ptr{Int32},hlcol::Ptr{Int32} and hlval::Ptr{Float64}.   hlrow stores indexes of line elements and hlcol their columns indexes. hlval stores non zero elements from   original matrix.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x)   x::Ptr{Float64}: vector that stores variables of optimization problem.   m::Int32: number of equality constraints.   p::Int32: number of inequality constraints.   lambda::Ptr{Float64}: stores lagrangian multipliers   lim::Int32: limit of elements in hlrow, hlcol and hlval.   inclf::Int32: indicates if objective function should be included in hessian.   hlnnz::Ptr{Int32}: number of non-zero elements in hessian.   hlrow::Ptr{Int32}: stores line indexes of elements in hlval.   hlcol::Ptr{Int32}: stores column indexes of elements in hlval.   hlval::Ptr{Float64}: stores non-zero elements of hessian sparse matrix.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.JuliaInterface4CUTEst.problem_params-Tuple{}","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEst.problem_params","text":"problem_params()::Tuple\n\nReturns a Tuple of parameters for a CUTEst model with types expected by ALGENCAN.\n\n\n\n\n\n","category":"method"},{"location":"#Main.JuliaInterface4CUTEst.csc2csr-Tuple{CUTEstModel, Vector{Float64}, Vector{Float64}, Vector{Int32}, Vector{Int32}, Vector{Int32}}","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEst.csc2csr","text":"csc2csr(     nlpobj::CUTEstModel,xwrap::Vector{Float64},val2::Vector{Float64},col::Vector{Int32},     ind2::Vector{Int32},line_len::Vector{Int32}   )::Nothing\n\nComputes jacobian of constraints and convert it to Compressed Sparse Row format.   Parameters:   nlpobj::CUTEstModel: stores a CUTEst object that describes optimization problem.   xwrap::Vector{Float64}: vector that stores variables of optimization problem   val2::Vector{Float64}: stores non zero elements in CSC format.   col::Vector{Int32}: stores columns indexes of elements from jval.   ind2::Vector{Int32}: stores indexes from jval of elements that are first elements    of its respective line in original matrix.   line_len::Vector{Int32}: stores quantity of non zero elements in each line.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaInterface4CUTEstTest","page":"This is MyProject Documentation","title":"JuliaInterface4CUTEstTest","text":"Defines a set of problems and run tests with them over ALGENCAN shared library.\n\n\n\n\n\n","category":"module"},{"location":"#Main.JuliaInterface4CUTEstTest.run_tests-Tuple{}","page":"This is MyProject Documentation","title":"Main.JuliaInterface4CUTEstTest.run_tests","text":"Executes tests over Julia interface with ALGENCAN from a defined set of 17 CUTEst problems.\n\n\n\n\n\n","category":"method"},{"location":"#ProblemDefinition","page":"This is MyProject Documentation","title":"ProblemDefinition","text":"Defines parameters and evaluation functions to optimization problems and export them to be used in ALGENCAN.\n\n\n\n\n\n","category":"module"},{"location":"#Main.ProblemDefinition.evalf!","page":"This is MyProject Documentation","title":"Main.ProblemDefinition.evalf!","text":"evalf!(n::Int32,x::Ptr{Float64},f::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing)::Nothing\n\nComputes objective function with parameters provided from ALGENCAN and stores it in the same    address of f::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   f::Ptr{Float64}: stores value of objective function.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.ProblemDefinition.evalc!","page":"This is MyProject Documentation","title":"Main.ProblemDefinition.evalc!","text":"evalc!(     n::Int32,x::Ptr{Float64},m::Int32,p::Int32,c::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing   )::Nothing\n\nComputes vector of restrictions of size m+p with parameters provided from ALGENCAN. Stores result in the same    address of c::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   m::Int32: number of equality constraints.   p::Int32: number of inequality constraints.   c::Ptr{Float64}: stores computed constraints, equality constraints comes first.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.ProblemDefinition.evalg!","page":"This is MyProject Documentation","title":"Main.ProblemDefinition.evalg!","text":"evalg!(n::Int32,x::Ptr{Float64},g::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing)::Nothing\n\nComputes gradient of objective function with parameters provided from ALGENCAN and stores it in the same    address of g::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   g::Ptr{Float64}: stores gradient of objective function.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.ProblemDefinition.evalj!","page":"This is MyProject Documentation","title":"Main.ProblemDefinition.evalj!","text":"evalj!(n::Int32,x::Ptr{Float64},m::Int32,p::Int32,ind::Ptr{Int32},     sorted::Ptr{Int32},jsta::Ptr{Int32},jlen::Ptr{Int32},lim::Int32,     jvar::Ptr{Int32},jval::Ptr{Float64},inform::Int32,pdataptr::Ptr{MyDataPtr}=nothing   )::Nothing\n\nComputes vectors that describes jacobian of restrictions in Compressed Sparse Row format. Computed vectors are   stored in the same addresses of jsta::Ptr{Int32},jlen::Ptr{Int32},jvar::Ptr{Int32} and jval::Ptr{Float64}.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x).   x::Ptr{Float64}: vector that stores variables of optimization problem.   m::Int32: number of equality constraints.   p::Int32: number of inequality constraints.   ind::Ptr{Int32}: boolean that indicates which constraints should be included in jacobian of constraints.   sorted::Ptr{Int32}: indicates if gradients are in ascending order.   jsta::Ptr{Int32}: stores indexes from jval of elements that are first elements of its respective line in original matrix.   jlen::Ptr{Int32}: stores quantity of non zero elements in each line.   lim::Int32: limit of elements in jvar and jval.   jvar::Ptr{Int32}: stores columns indexes of elements from jval.   jval::Ptr{Float64}: stores non zero elements.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.ProblemDefinition.evalhl!","page":"This is MyProject Documentation","title":"Main.ProblemDefinition.evalhl!","text":"evalhl!(     n::Int32,x::Ptr{Float64},m::Int32,p::Int32,lambda::Ptr{Float64},lim::Int32,     inclf::Int32,hlnnz::Ptr{Int32},hlrow::Ptr{Int32},hlcol::Ptr{Int32},hlval::Ptr{Float64},     inform::Ptr{Int32},pdataptr::Ptr{MyDataPtr}=nothing   )::Nothing\n\nComputes vectors that describes hessian of Lagrangian function in Coordinate format. Computed vectors are   stored in the same addresses of hlrow::Ptr{Int32},hlcol::Ptr{Int32} and hlval::Ptr{Float64}.   hlrow stores indexes of line elements and hlcol their columns indexes. hlval stores non zero elements from   original matrix.   Parameters:   n::Int32: number of variables in optimization problem (dimension of vector x)   x::Ptr{Float64}: vector that stores variables of optimization problem.   m::Int32: number of equality constraints.   p::Int32: number of inequality constraints.   lambda::Ptr{Float64}: stores lagrangian multipliers   lim::Int32: limit of elements in hlrow, hlcol and hlval.   inclf::Int32: indicates if objective function should be included in hessian.   hlnnz::Ptr{Int32}: number of non-zero elements in hessian.   hlrow::Ptr{Int32}: stores line indexes of elements in hlval.   hlcol::Ptr{Int32}: stores column indexes of elements in hlval.   hlval::Ptr{Float64}: stores non-zero elements of hessian sparse matrix.   inform::Int32: holds error code if any error occurrs during solving.   pdataptr::Ptr{MyDataPtr}: computes number of calls to a function.\n\n\n\n\n\n","category":"function"},{"location":"#Main.ProblemDefinition.problem_params-Tuple{}","page":"This is MyProject Documentation","title":"Main.ProblemDefinition.problem_params","text":"problem_params()::Tuple\n\nReturns a Tuple of parameters for a CUTEst model with types expected by ALGENCAN.\n\n\n\n\n\n","category":"method"}]
}
